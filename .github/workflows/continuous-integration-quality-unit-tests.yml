name: Continuous Integration - Quality & Unit Tests

on: [push, pull_request]

jobs:
  continuous-integration-quality-unit-tests:
    name: ${{ matrix.os }} - Python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-20.04, windows-latest]
        python-version: [3.8, 3.9, '3.10']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
    - name: Environment Variables
      run: |
        echo "CI_PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV
        echo "CI_PACKAGE=colour" >> $GITHUB_ENV
        echo "CI_SHA=${{ github.sha }}" >> $GITHUB_ENV
        echo "CI_OPENIMAGEIO_VERSION=2.2.18.0" >> $GITHUB_ENV
        echo "CI_OPENIMAGEIO_ARTIFACT=https://github.com/colour-science/artifacts/releases/download/OpenImageIO-Release-2.2.18.0/OpenImageIO-Release-2.2.18.0.zip" >> $GITHUB_ENV
        echo "COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}" >> $GITHUB_ENV
        echo "MPLBACKEND=AGG" >> $GITHUB_ENV
      shell: bash
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install graphviz
        export GRAPHVIZ_DIR="/usr/local/Cellar/graphviz/<VERSION>"
        pip install pygraphviz --global-option=build_ext --global-option="-I$GRAPHVIZ_DIR/include" --global-option="-L$GRAPHVIZ_DIR/lib"
    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get --yes install graphviz graphviz-dev libboost-all-dev libilmbase-dev libopenexr-dev libpng-dev libtiff5-dev
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --version 1.1.12
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      shell: bash
    - name: Install Package Dependencies (macOS & Ubuntu)
      if: matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-20.04'
      run: |
        poetry run python -m pip install --upgrade pip
        poetry install --extras "graphviz meshing optional plotting"
        poetry run python -c "import imageio;imageio.plugins.freeimage.download()"
      shell: bash
    - name: Install Package Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        poetry run python -m pip install --upgrade pip
        poetry install --extras "meshing optional plotting"
        poetry run python -c "import imageio;imageio.plugins.freeimage.download()"
      shell: bash
    - name: Install OpenImageIO (Ubuntu)
      if: matrix.os == 'ubuntu-20.04' && matrix.python-version == '3.8'
      run: |
        curl -L $CI_OPENIMAGEIO_ARTIFACT -o OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip
        unzip OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip -d OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION
        sudo cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/bin/* /usr/bin/
        sudo cp -r OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/* /usr/lib/
        sudo rm -rf /usr/lib/python$CI_PYTHON_VERSION
        cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/python$CI_PYTHON_VERSION/site-packages/OpenImageIO.*.so $(poetry env info -p)/lib/python$CI_PYTHON_VERSION/site-packages/OpenImageIO.so
      shell: bash
    - name: Pre-Commit (All Files)
      run: |
        poetry run pre-commit run --all-files
      shell: bash
    - name: Test Optimised Python Execution
      run: |
        poetry run python -OO -c "import $CI_PACKAGE"
      shell: bash
    - name: Test with Pytest
      run: |
        poetry run python -W ignore -m pytest --disable-warnings --doctest-modules --ignore=$CI_PACKAGE/examples --cov=$CI_PACKAGE $CI_PACKAGE
      shell: bash
    - name: Upload Coverage to coveralls.io
      if: matrix.os == 'ubuntu-20.04' && matrix.python-version == '3.8'
      run: |
        if [ -z "$COVERALLS_REPO_TOKEN" ]; then echo \"COVERALLS_REPO_TOKEN\" secret is undefined!; else poetry run coveralls; fi
      shell: bash
